datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  channels      Channel[]
  requests      Request[]
  messages      Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Channel {
  id String @id @default(cuid())
  name String
  ownerId String
  
  owner User @relation(fields: [ownerId], references: [id])
  requests Request[]
  messages Message[]
}

model Request {
  id String @id @default(cuid())
  userId String
  channelId String
  status RequestStatus @default(PENDING)
  user User @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])
  @@unique([userId, channelId])
}

model Message {
  id String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  userId String
  channelId String
  user User @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
