datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  ownedChannels   Channel[] @relation("ChannelOwner")
  channelRequests Request[] @relation("UserRequests")
  sentMessages    Message[] @relation("UserMessages")
  memberChannels  Channel[] @relation("ChannelMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          Int                                   @id @default(autoincrement())
  description String
  departure   DateTime
  from        Unsupported("geography(Point, 4326)")
  to          Unsupported("geography(Point, 4326)")
  fromAddress String
  toAddress   String
  ownerId     String
  womenOnly   Boolean
  members     User[]                                @relation("ChannelMembers")

  owner    User      @relation("ChannelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  requests Request[] @relation("ChannelRequests")
  messages Message[] @relation("ChannelMessages")

  @@index([from], name: "location_from_idx", type: Gist)
  @@index([to], name: "location_to_idx", type: Gist)
}

model Request {
  id        Int           @id @default(autoincrement())
  userId    String
  channelId Int
  status    RequestStatus @default(PENDING)

  user    User    @relation("UserRequests", fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation("ChannelRequests", fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  channelId Int

  user    User    @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation("ChannelMessages", fields: [channelId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  REJECTED
}
